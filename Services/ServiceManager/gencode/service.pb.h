// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_service_2eproto_metadata_getter(int index);
namespace service {
class AudioDataRequest;
struct AudioDataRequestDefaultTypeInternal;
extern AudioDataRequestDefaultTypeInternal _AudioDataRequest_default_instance_;
class AudioDataResponse;
struct AudioDataResponseDefaultTypeInternal;
extern AudioDataResponseDefaultTypeInternal _AudioDataResponse_default_instance_;
class AudioServiceRequest;
struct AudioServiceRequestDefaultTypeInternal;
extern AudioServiceRequestDefaultTypeInternal _AudioServiceRequest_default_instance_;
class AudioServiceResponse;
struct AudioServiceResponseDefaultTypeInternal;
extern AudioServiceResponseDefaultTypeInternal _AudioServiceResponse_default_instance_;
class HMIDataRequest;
struct HMIDataRequestDefaultTypeInternal;
extern HMIDataRequestDefaultTypeInternal _HMIDataRequest_default_instance_;
class HMIDataResponse;
struct HMIDataResponseDefaultTypeInternal;
extern HMIDataResponseDefaultTypeInternal _HMIDataResponse_default_instance_;
class HMIServiceRequest;
struct HMIServiceRequestDefaultTypeInternal;
extern HMIServiceRequestDefaultTypeInternal _HMIServiceRequest_default_instance_;
class HMIServiceResponse;
struct HMIServiceResponseDefaultTypeInternal;
extern HMIServiceResponseDefaultTypeInternal _HMIServiceResponse_default_instance_;
class MQTTDataRequest;
struct MQTTDataRequestDefaultTypeInternal;
extern MQTTDataRequestDefaultTypeInternal _MQTTDataRequest_default_instance_;
class MQTTDataResponse;
struct MQTTDataResponseDefaultTypeInternal;
extern MQTTDataResponseDefaultTypeInternal _MQTTDataResponse_default_instance_;
class MQTTServiceRequest;
struct MQTTServiceRequestDefaultTypeInternal;
extern MQTTServiceRequestDefaultTypeInternal _MQTTServiceRequest_default_instance_;
class MQTTServiceResponse;
struct MQTTServiceResponseDefaultTypeInternal;
extern MQTTServiceResponseDefaultTypeInternal _MQTTServiceResponse_default_instance_;
class RegisterAudioRequest;
struct RegisterAudioRequestDefaultTypeInternal;
extern RegisterAudioRequestDefaultTypeInternal _RegisterAudioRequest_default_instance_;
class RegisterAudioResponse;
struct RegisterAudioResponseDefaultTypeInternal;
extern RegisterAudioResponseDefaultTypeInternal _RegisterAudioResponse_default_instance_;
class RegisterHMIRequest;
struct RegisterHMIRequestDefaultTypeInternal;
extern RegisterHMIRequestDefaultTypeInternal _RegisterHMIRequest_default_instance_;
class RegisterHMIResponse;
struct RegisterHMIResponseDefaultTypeInternal;
extern RegisterHMIResponseDefaultTypeInternal _RegisterHMIResponse_default_instance_;
class RegisterMQTTRequest;
struct RegisterMQTTRequestDefaultTypeInternal;
extern RegisterMQTTRequestDefaultTypeInternal _RegisterMQTTRequest_default_instance_;
class RegisterMQTTResponse;
struct RegisterMQTTResponseDefaultTypeInternal;
extern RegisterMQTTResponseDefaultTypeInternal _RegisterMQTTResponse_default_instance_;
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> ::service::AudioDataRequest* Arena::CreateMaybeMessage<::service::AudioDataRequest>(Arena*);
template<> ::service::AudioDataResponse* Arena::CreateMaybeMessage<::service::AudioDataResponse>(Arena*);
template<> ::service::AudioServiceRequest* Arena::CreateMaybeMessage<::service::AudioServiceRequest>(Arena*);
template<> ::service::AudioServiceResponse* Arena::CreateMaybeMessage<::service::AudioServiceResponse>(Arena*);
template<> ::service::HMIDataRequest* Arena::CreateMaybeMessage<::service::HMIDataRequest>(Arena*);
template<> ::service::HMIDataResponse* Arena::CreateMaybeMessage<::service::HMIDataResponse>(Arena*);
template<> ::service::HMIServiceRequest* Arena::CreateMaybeMessage<::service::HMIServiceRequest>(Arena*);
template<> ::service::HMIServiceResponse* Arena::CreateMaybeMessage<::service::HMIServiceResponse>(Arena*);
template<> ::service::MQTTDataRequest* Arena::CreateMaybeMessage<::service::MQTTDataRequest>(Arena*);
template<> ::service::MQTTDataResponse* Arena::CreateMaybeMessage<::service::MQTTDataResponse>(Arena*);
template<> ::service::MQTTServiceRequest* Arena::CreateMaybeMessage<::service::MQTTServiceRequest>(Arena*);
template<> ::service::MQTTServiceResponse* Arena::CreateMaybeMessage<::service::MQTTServiceResponse>(Arena*);
template<> ::service::RegisterAudioRequest* Arena::CreateMaybeMessage<::service::RegisterAudioRequest>(Arena*);
template<> ::service::RegisterAudioResponse* Arena::CreateMaybeMessage<::service::RegisterAudioResponse>(Arena*);
template<> ::service::RegisterHMIRequest* Arena::CreateMaybeMessage<::service::RegisterHMIRequest>(Arena*);
template<> ::service::RegisterHMIResponse* Arena::CreateMaybeMessage<::service::RegisterHMIResponse>(Arena*);
template<> ::service::RegisterMQTTRequest* Arena::CreateMaybeMessage<::service::RegisterMQTTRequest>(Arena*);
template<> ::service::RegisterMQTTResponse* Arena::CreateMaybeMessage<::service::RegisterMQTTResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace service {

// ===================================================================

class RegisterHMIRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.RegisterHMIRequest) */ {
 public:
  inline RegisterHMIRequest() : RegisterHMIRequest(nullptr) {}
  virtual ~RegisterHMIRequest();
  explicit constexpr RegisterHMIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterHMIRequest(const RegisterHMIRequest& from);
  RegisterHMIRequest(RegisterHMIRequest&& from) noexcept
    : RegisterHMIRequest() {
    *this = ::std::move(from);
  }

  inline RegisterHMIRequest& operator=(const RegisterHMIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterHMIRequest& operator=(RegisterHMIRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterHMIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterHMIRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterHMIRequest*>(
               &_RegisterHMIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterHMIRequest& a, RegisterHMIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterHMIRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterHMIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterHMIRequest* New() const final {
    return CreateMaybeMessage<RegisterHMIRequest>(nullptr);
  }

  RegisterHMIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterHMIRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterHMIRequest& from);
  void MergeFrom(const RegisterHMIRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterHMIRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.RegisterHMIRequest";
  }
  protected:
  explicit RegisterHMIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:service.RegisterHMIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class RegisterHMIResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.RegisterHMIResponse) */ {
 public:
  inline RegisterHMIResponse() : RegisterHMIResponse(nullptr) {}
  virtual ~RegisterHMIResponse();
  explicit constexpr RegisterHMIResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterHMIResponse(const RegisterHMIResponse& from);
  RegisterHMIResponse(RegisterHMIResponse&& from) noexcept
    : RegisterHMIResponse() {
    *this = ::std::move(from);
  }

  inline RegisterHMIResponse& operator=(const RegisterHMIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterHMIResponse& operator=(RegisterHMIResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterHMIResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterHMIResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterHMIResponse*>(
               &_RegisterHMIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterHMIResponse& a, RegisterHMIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterHMIResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterHMIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterHMIResponse* New() const final {
    return CreateMaybeMessage<RegisterHMIResponse>(nullptr);
  }

  RegisterHMIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterHMIResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterHMIResponse& from);
  void MergeFrom(const RegisterHMIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterHMIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.RegisterHMIResponse";
  }
  protected:
  explicit RegisterHMIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service.RegisterHMIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class RegisterAudioRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.RegisterAudioRequest) */ {
 public:
  inline RegisterAudioRequest() : RegisterAudioRequest(nullptr) {}
  virtual ~RegisterAudioRequest();
  explicit constexpr RegisterAudioRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterAudioRequest(const RegisterAudioRequest& from);
  RegisterAudioRequest(RegisterAudioRequest&& from) noexcept
    : RegisterAudioRequest() {
    *this = ::std::move(from);
  }

  inline RegisterAudioRequest& operator=(const RegisterAudioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAudioRequest& operator=(RegisterAudioRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAudioRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterAudioRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterAudioRequest*>(
               &_RegisterAudioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterAudioRequest& a, RegisterAudioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAudioRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAudioRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAudioRequest* New() const final {
    return CreateMaybeMessage<RegisterAudioRequest>(nullptr);
  }

  RegisterAudioRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAudioRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAudioRequest& from);
  void MergeFrom(const RegisterAudioRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAudioRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.RegisterAudioRequest";
  }
  protected:
  explicit RegisterAudioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:service.RegisterAudioRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class RegisterAudioResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.RegisterAudioResponse) */ {
 public:
  inline RegisterAudioResponse() : RegisterAudioResponse(nullptr) {}
  virtual ~RegisterAudioResponse();
  explicit constexpr RegisterAudioResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterAudioResponse(const RegisterAudioResponse& from);
  RegisterAudioResponse(RegisterAudioResponse&& from) noexcept
    : RegisterAudioResponse() {
    *this = ::std::move(from);
  }

  inline RegisterAudioResponse& operator=(const RegisterAudioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAudioResponse& operator=(RegisterAudioResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAudioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterAudioResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterAudioResponse*>(
               &_RegisterAudioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterAudioResponse& a, RegisterAudioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAudioResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAudioResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAudioResponse* New() const final {
    return CreateMaybeMessage<RegisterAudioResponse>(nullptr);
  }

  RegisterAudioResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAudioResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAudioResponse& from);
  void MergeFrom(const RegisterAudioResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAudioResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.RegisterAudioResponse";
  }
  protected:
  explicit RegisterAudioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service.RegisterAudioResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class RegisterMQTTRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.RegisterMQTTRequest) */ {
 public:
  inline RegisterMQTTRequest() : RegisterMQTTRequest(nullptr) {}
  virtual ~RegisterMQTTRequest();
  explicit constexpr RegisterMQTTRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterMQTTRequest(const RegisterMQTTRequest& from);
  RegisterMQTTRequest(RegisterMQTTRequest&& from) noexcept
    : RegisterMQTTRequest() {
    *this = ::std::move(from);
  }

  inline RegisterMQTTRequest& operator=(const RegisterMQTTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterMQTTRequest& operator=(RegisterMQTTRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterMQTTRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterMQTTRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterMQTTRequest*>(
               &_RegisterMQTTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterMQTTRequest& a, RegisterMQTTRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterMQTTRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterMQTTRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterMQTTRequest* New() const final {
    return CreateMaybeMessage<RegisterMQTTRequest>(nullptr);
  }

  RegisterMQTTRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterMQTTRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterMQTTRequest& from);
  void MergeFrom(const RegisterMQTTRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterMQTTRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.RegisterMQTTRequest";
  }
  protected:
  explicit RegisterMQTTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:service.RegisterMQTTRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class RegisterMQTTResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.RegisterMQTTResponse) */ {
 public:
  inline RegisterMQTTResponse() : RegisterMQTTResponse(nullptr) {}
  virtual ~RegisterMQTTResponse();
  explicit constexpr RegisterMQTTResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterMQTTResponse(const RegisterMQTTResponse& from);
  RegisterMQTTResponse(RegisterMQTTResponse&& from) noexcept
    : RegisterMQTTResponse() {
    *this = ::std::move(from);
  }

  inline RegisterMQTTResponse& operator=(const RegisterMQTTResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterMQTTResponse& operator=(RegisterMQTTResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterMQTTResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterMQTTResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterMQTTResponse*>(
               &_RegisterMQTTResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterMQTTResponse& a, RegisterMQTTResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterMQTTResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterMQTTResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterMQTTResponse* New() const final {
    return CreateMaybeMessage<RegisterMQTTResponse>(nullptr);
  }

  RegisterMQTTResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterMQTTResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterMQTTResponse& from);
  void MergeFrom(const RegisterMQTTResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterMQTTResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.RegisterMQTTResponse";
  }
  protected:
  explicit RegisterMQTTResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service.RegisterMQTTResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class HMIServiceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.HMIServiceRequest) */ {
 public:
  inline HMIServiceRequest() : HMIServiceRequest(nullptr) {}
  virtual ~HMIServiceRequest();
  explicit constexpr HMIServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMIServiceRequest(const HMIServiceRequest& from);
  HMIServiceRequest(HMIServiceRequest&& from) noexcept
    : HMIServiceRequest() {
    *this = ::std::move(from);
  }

  inline HMIServiceRequest& operator=(const HMIServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIServiceRequest& operator=(HMIServiceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMIServiceRequest* internal_default_instance() {
    return reinterpret_cast<const HMIServiceRequest*>(
               &_HMIServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HMIServiceRequest& a, HMIServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIServiceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMIServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIServiceRequest* New() const final {
    return CreateMaybeMessage<HMIServiceRequest>(nullptr);
  }

  HMIServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIServiceRequest& from);
  void MergeFrom(const HMIServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.HMIServiceRequest";
  }
  protected:
  explicit HMIServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestDataFieldNumber = 1,
  };
  // string request_data = 1;
  void clear_request_data();
  const std::string& request_data() const;
  void set_request_data(const std::string& value);
  void set_request_data(std::string&& value);
  void set_request_data(const char* value);
  void set_request_data(const char* value, size_t size);
  std::string* mutable_request_data();
  std::string* release_request_data();
  void set_allocated_request_data(std::string* request_data);
  private:
  const std::string& _internal_request_data() const;
  void _internal_set_request_data(const std::string& value);
  std::string* _internal_mutable_request_data();
  public:

  // @@protoc_insertion_point(class_scope:service.HMIServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class HMIServiceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.HMIServiceResponse) */ {
 public:
  inline HMIServiceResponse() : HMIServiceResponse(nullptr) {}
  virtual ~HMIServiceResponse();
  explicit constexpr HMIServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMIServiceResponse(const HMIServiceResponse& from);
  HMIServiceResponse(HMIServiceResponse&& from) noexcept
    : HMIServiceResponse() {
    *this = ::std::move(from);
  }

  inline HMIServiceResponse& operator=(const HMIServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIServiceResponse& operator=(HMIServiceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMIServiceResponse* internal_default_instance() {
    return reinterpret_cast<const HMIServiceResponse*>(
               &_HMIServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HMIServiceResponse& a, HMIServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIServiceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMIServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIServiceResponse* New() const final {
    return CreateMaybeMessage<HMIServiceResponse>(nullptr);
  }

  HMIServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIServiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIServiceResponse& from);
  void MergeFrom(const HMIServiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIServiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.HMIServiceResponse";
  }
  protected:
  explicit HMIServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseDataFieldNumber = 1,
  };
  // string response_data = 1;
  void clear_response_data();
  const std::string& response_data() const;
  void set_response_data(const std::string& value);
  void set_response_data(std::string&& value);
  void set_response_data(const char* value);
  void set_response_data(const char* value, size_t size);
  std::string* mutable_response_data();
  std::string* release_response_data();
  void set_allocated_response_data(std::string* response_data);
  private:
  const std::string& _internal_response_data() const;
  void _internal_set_response_data(const std::string& value);
  std::string* _internal_mutable_response_data();
  public:

  // @@protoc_insertion_point(class_scope:service.HMIServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class AudioServiceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.AudioServiceRequest) */ {
 public:
  inline AudioServiceRequest() : AudioServiceRequest(nullptr) {}
  virtual ~AudioServiceRequest();
  explicit constexpr AudioServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioServiceRequest(const AudioServiceRequest& from);
  AudioServiceRequest(AudioServiceRequest&& from) noexcept
    : AudioServiceRequest() {
    *this = ::std::move(from);
  }

  inline AudioServiceRequest& operator=(const AudioServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioServiceRequest& operator=(AudioServiceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioServiceRequest* internal_default_instance() {
    return reinterpret_cast<const AudioServiceRequest*>(
               &_AudioServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AudioServiceRequest& a, AudioServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioServiceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioServiceRequest* New() const final {
    return CreateMaybeMessage<AudioServiceRequest>(nullptr);
  }

  AudioServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioServiceRequest& from);
  void MergeFrom(const AudioServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.AudioServiceRequest";
  }
  protected:
  explicit AudioServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestDataFieldNumber = 1,
  };
  // string request_data = 1;
  void clear_request_data();
  const std::string& request_data() const;
  void set_request_data(const std::string& value);
  void set_request_data(std::string&& value);
  void set_request_data(const char* value);
  void set_request_data(const char* value, size_t size);
  std::string* mutable_request_data();
  std::string* release_request_data();
  void set_allocated_request_data(std::string* request_data);
  private:
  const std::string& _internal_request_data() const;
  void _internal_set_request_data(const std::string& value);
  std::string* _internal_mutable_request_data();
  public:

  // @@protoc_insertion_point(class_scope:service.AudioServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class AudioServiceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.AudioServiceResponse) */ {
 public:
  inline AudioServiceResponse() : AudioServiceResponse(nullptr) {}
  virtual ~AudioServiceResponse();
  explicit constexpr AudioServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioServiceResponse(const AudioServiceResponse& from);
  AudioServiceResponse(AudioServiceResponse&& from) noexcept
    : AudioServiceResponse() {
    *this = ::std::move(from);
  }

  inline AudioServiceResponse& operator=(const AudioServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioServiceResponse& operator=(AudioServiceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioServiceResponse* internal_default_instance() {
    return reinterpret_cast<const AudioServiceResponse*>(
               &_AudioServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AudioServiceResponse& a, AudioServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioServiceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioServiceResponse* New() const final {
    return CreateMaybeMessage<AudioServiceResponse>(nullptr);
  }

  AudioServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioServiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioServiceResponse& from);
  void MergeFrom(const AudioServiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioServiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.AudioServiceResponse";
  }
  protected:
  explicit AudioServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseDataFieldNumber = 1,
  };
  // string response_data = 1;
  void clear_response_data();
  const std::string& response_data() const;
  void set_response_data(const std::string& value);
  void set_response_data(std::string&& value);
  void set_response_data(const char* value);
  void set_response_data(const char* value, size_t size);
  std::string* mutable_response_data();
  std::string* release_response_data();
  void set_allocated_response_data(std::string* response_data);
  private:
  const std::string& _internal_response_data() const;
  void _internal_set_response_data(const std::string& value);
  std::string* _internal_mutable_response_data();
  public:

  // @@protoc_insertion_point(class_scope:service.AudioServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class MQTTServiceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.MQTTServiceRequest) */ {
 public:
  inline MQTTServiceRequest() : MQTTServiceRequest(nullptr) {}
  virtual ~MQTTServiceRequest();
  explicit constexpr MQTTServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MQTTServiceRequest(const MQTTServiceRequest& from);
  MQTTServiceRequest(MQTTServiceRequest&& from) noexcept
    : MQTTServiceRequest() {
    *this = ::std::move(from);
  }

  inline MQTTServiceRequest& operator=(const MQTTServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MQTTServiceRequest& operator=(MQTTServiceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MQTTServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MQTTServiceRequest* internal_default_instance() {
    return reinterpret_cast<const MQTTServiceRequest*>(
               &_MQTTServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MQTTServiceRequest& a, MQTTServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MQTTServiceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MQTTServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MQTTServiceRequest* New() const final {
    return CreateMaybeMessage<MQTTServiceRequest>(nullptr);
  }

  MQTTServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MQTTServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MQTTServiceRequest& from);
  void MergeFrom(const MQTTServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MQTTServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.MQTTServiceRequest";
  }
  protected:
  explicit MQTTServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestDataFieldNumber = 1,
  };
  // string request_data = 1;
  void clear_request_data();
  const std::string& request_data() const;
  void set_request_data(const std::string& value);
  void set_request_data(std::string&& value);
  void set_request_data(const char* value);
  void set_request_data(const char* value, size_t size);
  std::string* mutable_request_data();
  std::string* release_request_data();
  void set_allocated_request_data(std::string* request_data);
  private:
  const std::string& _internal_request_data() const;
  void _internal_set_request_data(const std::string& value);
  std::string* _internal_mutable_request_data();
  public:

  // @@protoc_insertion_point(class_scope:service.MQTTServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class MQTTServiceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.MQTTServiceResponse) */ {
 public:
  inline MQTTServiceResponse() : MQTTServiceResponse(nullptr) {}
  virtual ~MQTTServiceResponse();
  explicit constexpr MQTTServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MQTTServiceResponse(const MQTTServiceResponse& from);
  MQTTServiceResponse(MQTTServiceResponse&& from) noexcept
    : MQTTServiceResponse() {
    *this = ::std::move(from);
  }

  inline MQTTServiceResponse& operator=(const MQTTServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MQTTServiceResponse& operator=(MQTTServiceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MQTTServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MQTTServiceResponse* internal_default_instance() {
    return reinterpret_cast<const MQTTServiceResponse*>(
               &_MQTTServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MQTTServiceResponse& a, MQTTServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MQTTServiceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MQTTServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MQTTServiceResponse* New() const final {
    return CreateMaybeMessage<MQTTServiceResponse>(nullptr);
  }

  MQTTServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MQTTServiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MQTTServiceResponse& from);
  void MergeFrom(const MQTTServiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MQTTServiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.MQTTServiceResponse";
  }
  protected:
  explicit MQTTServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseDataFieldNumber = 1,
  };
  // string response_data = 1;
  void clear_response_data();
  const std::string& response_data() const;
  void set_response_data(const std::string& value);
  void set_response_data(std::string&& value);
  void set_response_data(const char* value);
  void set_response_data(const char* value, size_t size);
  std::string* mutable_response_data();
  std::string* release_response_data();
  void set_allocated_response_data(std::string* response_data);
  private:
  const std::string& _internal_response_data() const;
  void _internal_set_response_data(const std::string& value);
  std::string* _internal_mutable_response_data();
  public:

  // @@protoc_insertion_point(class_scope:service.MQTTServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class HMIDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.HMIDataRequest) */ {
 public:
  inline HMIDataRequest() : HMIDataRequest(nullptr) {}
  virtual ~HMIDataRequest();
  explicit constexpr HMIDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMIDataRequest(const HMIDataRequest& from);
  HMIDataRequest(HMIDataRequest&& from) noexcept
    : HMIDataRequest() {
    *this = ::std::move(from);
  }

  inline HMIDataRequest& operator=(const HMIDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIDataRequest& operator=(HMIDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMIDataRequest* internal_default_instance() {
    return reinterpret_cast<const HMIDataRequest*>(
               &_HMIDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(HMIDataRequest& a, HMIDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMIDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIDataRequest* New() const final {
    return CreateMaybeMessage<HMIDataRequest>(nullptr);
  }

  HMIDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIDataRequest& from);
  void MergeFrom(const HMIDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.HMIDataRequest";
  }
  protected:
  explicit HMIDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:service.HMIDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class HMIDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.HMIDataResponse) */ {
 public:
  inline HMIDataResponse() : HMIDataResponse(nullptr) {}
  virtual ~HMIDataResponse();
  explicit constexpr HMIDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HMIDataResponse(const HMIDataResponse& from);
  HMIDataResponse(HMIDataResponse&& from) noexcept
    : HMIDataResponse() {
    *this = ::std::move(from);
  }

  inline HMIDataResponse& operator=(const HMIDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIDataResponse& operator=(HMIDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HMIDataResponse* internal_default_instance() {
    return reinterpret_cast<const HMIDataResponse*>(
               &_HMIDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HMIDataResponse& a, HMIDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HMIDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIDataResponse* New() const final {
    return CreateMaybeMessage<HMIDataResponse>(nullptr);
  }

  HMIDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIDataResponse& from);
  void MergeFrom(const HMIDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.HMIDataResponse";
  }
  protected:
  explicit HMIDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service.HMIDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class MQTTDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.MQTTDataRequest) */ {
 public:
  inline MQTTDataRequest() : MQTTDataRequest(nullptr) {}
  virtual ~MQTTDataRequest();
  explicit constexpr MQTTDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MQTTDataRequest(const MQTTDataRequest& from);
  MQTTDataRequest(MQTTDataRequest&& from) noexcept
    : MQTTDataRequest() {
    *this = ::std::move(from);
  }

  inline MQTTDataRequest& operator=(const MQTTDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MQTTDataRequest& operator=(MQTTDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MQTTDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MQTTDataRequest* internal_default_instance() {
    return reinterpret_cast<const MQTTDataRequest*>(
               &_MQTTDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MQTTDataRequest& a, MQTTDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MQTTDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MQTTDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MQTTDataRequest* New() const final {
    return CreateMaybeMessage<MQTTDataRequest>(nullptr);
  }

  MQTTDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MQTTDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MQTTDataRequest& from);
  void MergeFrom(const MQTTDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MQTTDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.MQTTDataRequest";
  }
  protected:
  explicit MQTTDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:service.MQTTDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class MQTTDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.MQTTDataResponse) */ {
 public:
  inline MQTTDataResponse() : MQTTDataResponse(nullptr) {}
  virtual ~MQTTDataResponse();
  explicit constexpr MQTTDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MQTTDataResponse(const MQTTDataResponse& from);
  MQTTDataResponse(MQTTDataResponse&& from) noexcept
    : MQTTDataResponse() {
    *this = ::std::move(from);
  }

  inline MQTTDataResponse& operator=(const MQTTDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MQTTDataResponse& operator=(MQTTDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MQTTDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MQTTDataResponse* internal_default_instance() {
    return reinterpret_cast<const MQTTDataResponse*>(
               &_MQTTDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MQTTDataResponse& a, MQTTDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MQTTDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MQTTDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MQTTDataResponse* New() const final {
    return CreateMaybeMessage<MQTTDataResponse>(nullptr);
  }

  MQTTDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MQTTDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MQTTDataResponse& from);
  void MergeFrom(const MQTTDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MQTTDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.MQTTDataResponse";
  }
  protected:
  explicit MQTTDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service.MQTTDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class AudioDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.AudioDataRequest) */ {
 public:
  inline AudioDataRequest() : AudioDataRequest(nullptr) {}
  virtual ~AudioDataRequest();
  explicit constexpr AudioDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioDataRequest(const AudioDataRequest& from);
  AudioDataRequest(AudioDataRequest&& from) noexcept
    : AudioDataRequest() {
    *this = ::std::move(from);
  }

  inline AudioDataRequest& operator=(const AudioDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioDataRequest& operator=(AudioDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioDataRequest* internal_default_instance() {
    return reinterpret_cast<const AudioDataRequest*>(
               &_AudioDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AudioDataRequest& a, AudioDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioDataRequest* New() const final {
    return CreateMaybeMessage<AudioDataRequest>(nullptr);
  }

  AudioDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioDataRequest& from);
  void MergeFrom(const AudioDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.AudioDataRequest";
  }
  protected:
  explicit AudioDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:service.AudioDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class AudioDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:service.AudioDataResponse) */ {
 public:
  inline AudioDataResponse() : AudioDataResponse(nullptr) {}
  virtual ~AudioDataResponse();
  explicit constexpr AudioDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioDataResponse(const AudioDataResponse& from);
  AudioDataResponse(AudioDataResponse&& from) noexcept
    : AudioDataResponse() {
    *this = ::std::move(from);
  }

  inline AudioDataResponse& operator=(const AudioDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioDataResponse& operator=(AudioDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioDataResponse* internal_default_instance() {
    return reinterpret_cast<const AudioDataResponse*>(
               &_AudioDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AudioDataResponse& a, AudioDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioDataResponse* New() const final {
    return CreateMaybeMessage<AudioDataResponse>(nullptr);
  }

  AudioDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioDataResponse& from);
  void MergeFrom(const AudioDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "service.AudioDataResponse";
  }
  protected:
  explicit AudioDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_service_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:service.AudioDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterHMIRequest

// string client_id = 1;
inline void RegisterHMIRequest::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& RegisterHMIRequest::client_id() const {
  // @@protoc_insertion_point(field_get:service.RegisterHMIRequest.client_id)
  return _internal_client_id();
}
inline void RegisterHMIRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:service.RegisterHMIRequest.client_id)
}
inline std::string* RegisterHMIRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:service.RegisterHMIRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& RegisterHMIRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void RegisterHMIRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterHMIRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.RegisterHMIRequest.client_id)
}
inline void RegisterHMIRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.RegisterHMIRequest.client_id)
}
inline void RegisterHMIRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.RegisterHMIRequest.client_id)
}
inline std::string* RegisterHMIRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterHMIRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:service.RegisterHMIRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterHMIRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.RegisterHMIRequest.client_id)
}

// -------------------------------------------------------------------

// RegisterHMIResponse

// bool success = 1;
inline void RegisterHMIResponse::clear_success() {
  success_ = false;
}
inline bool RegisterHMIResponse::_internal_success() const {
  return success_;
}
inline bool RegisterHMIResponse::success() const {
  // @@protoc_insertion_point(field_get:service.RegisterHMIResponse.success)
  return _internal_success();
}
inline void RegisterHMIResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterHMIResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:service.RegisterHMIResponse.success)
}

// -------------------------------------------------------------------

// RegisterAudioRequest

// string client_id = 1;
inline void RegisterAudioRequest::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& RegisterAudioRequest::client_id() const {
  // @@protoc_insertion_point(field_get:service.RegisterAudioRequest.client_id)
  return _internal_client_id();
}
inline void RegisterAudioRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:service.RegisterAudioRequest.client_id)
}
inline std::string* RegisterAudioRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:service.RegisterAudioRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& RegisterAudioRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void RegisterAudioRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterAudioRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.RegisterAudioRequest.client_id)
}
inline void RegisterAudioRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.RegisterAudioRequest.client_id)
}
inline void RegisterAudioRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.RegisterAudioRequest.client_id)
}
inline std::string* RegisterAudioRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterAudioRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:service.RegisterAudioRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterAudioRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.RegisterAudioRequest.client_id)
}

// -------------------------------------------------------------------

// RegisterAudioResponse

// bool success = 1;
inline void RegisterAudioResponse::clear_success() {
  success_ = false;
}
inline bool RegisterAudioResponse::_internal_success() const {
  return success_;
}
inline bool RegisterAudioResponse::success() const {
  // @@protoc_insertion_point(field_get:service.RegisterAudioResponse.success)
  return _internal_success();
}
inline void RegisterAudioResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterAudioResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:service.RegisterAudioResponse.success)
}

// -------------------------------------------------------------------

// RegisterMQTTRequest

// string client_id = 1;
inline void RegisterMQTTRequest::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& RegisterMQTTRequest::client_id() const {
  // @@protoc_insertion_point(field_get:service.RegisterMQTTRequest.client_id)
  return _internal_client_id();
}
inline void RegisterMQTTRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:service.RegisterMQTTRequest.client_id)
}
inline std::string* RegisterMQTTRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:service.RegisterMQTTRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& RegisterMQTTRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void RegisterMQTTRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterMQTTRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.RegisterMQTTRequest.client_id)
}
inline void RegisterMQTTRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.RegisterMQTTRequest.client_id)
}
inline void RegisterMQTTRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.RegisterMQTTRequest.client_id)
}
inline std::string* RegisterMQTTRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterMQTTRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:service.RegisterMQTTRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterMQTTRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.RegisterMQTTRequest.client_id)
}

// -------------------------------------------------------------------

// RegisterMQTTResponse

// bool success = 1;
inline void RegisterMQTTResponse::clear_success() {
  success_ = false;
}
inline bool RegisterMQTTResponse::_internal_success() const {
  return success_;
}
inline bool RegisterMQTTResponse::success() const {
  // @@protoc_insertion_point(field_get:service.RegisterMQTTResponse.success)
  return _internal_success();
}
inline void RegisterMQTTResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterMQTTResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:service.RegisterMQTTResponse.success)
}

// -------------------------------------------------------------------

// HMIServiceRequest

// string request_data = 1;
inline void HMIServiceRequest::clear_request_data() {
  request_data_.ClearToEmpty();
}
inline const std::string& HMIServiceRequest::request_data() const {
  // @@protoc_insertion_point(field_get:service.HMIServiceRequest.request_data)
  return _internal_request_data();
}
inline void HMIServiceRequest::set_request_data(const std::string& value) {
  _internal_set_request_data(value);
  // @@protoc_insertion_point(field_set:service.HMIServiceRequest.request_data)
}
inline std::string* HMIServiceRequest::mutable_request_data() {
  // @@protoc_insertion_point(field_mutable:service.HMIServiceRequest.request_data)
  return _internal_mutable_request_data();
}
inline const std::string& HMIServiceRequest::_internal_request_data() const {
  return request_data_.Get();
}
inline void HMIServiceRequest::_internal_set_request_data(const std::string& value) {
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HMIServiceRequest::set_request_data(std::string&& value) {
  
  request_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.HMIServiceRequest.request_data)
}
inline void HMIServiceRequest::set_request_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.HMIServiceRequest.request_data)
}
inline void HMIServiceRequest::set_request_data(const char* value,
    size_t size) {
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.HMIServiceRequest.request_data)
}
inline std::string* HMIServiceRequest::_internal_mutable_request_data() {
  
  return request_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HMIServiceRequest::release_request_data() {
  // @@protoc_insertion_point(field_release:service.HMIServiceRequest.request_data)
  return request_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HMIServiceRequest::set_allocated_request_data(std::string* request_data) {
  if (request_data != nullptr) {
    
  } else {
    
  }
  request_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.HMIServiceRequest.request_data)
}

// -------------------------------------------------------------------

// HMIServiceResponse

// string response_data = 1;
inline void HMIServiceResponse::clear_response_data() {
  response_data_.ClearToEmpty();
}
inline const std::string& HMIServiceResponse::response_data() const {
  // @@protoc_insertion_point(field_get:service.HMIServiceResponse.response_data)
  return _internal_response_data();
}
inline void HMIServiceResponse::set_response_data(const std::string& value) {
  _internal_set_response_data(value);
  // @@protoc_insertion_point(field_set:service.HMIServiceResponse.response_data)
}
inline std::string* HMIServiceResponse::mutable_response_data() {
  // @@protoc_insertion_point(field_mutable:service.HMIServiceResponse.response_data)
  return _internal_mutable_response_data();
}
inline const std::string& HMIServiceResponse::_internal_response_data() const {
  return response_data_.Get();
}
inline void HMIServiceResponse::_internal_set_response_data(const std::string& value) {
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HMIServiceResponse::set_response_data(std::string&& value) {
  
  response_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.HMIServiceResponse.response_data)
}
inline void HMIServiceResponse::set_response_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.HMIServiceResponse.response_data)
}
inline void HMIServiceResponse::set_response_data(const char* value,
    size_t size) {
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.HMIServiceResponse.response_data)
}
inline std::string* HMIServiceResponse::_internal_mutable_response_data() {
  
  return response_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HMIServiceResponse::release_response_data() {
  // @@protoc_insertion_point(field_release:service.HMIServiceResponse.response_data)
  return response_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HMIServiceResponse::set_allocated_response_data(std::string* response_data) {
  if (response_data != nullptr) {
    
  } else {
    
  }
  response_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.HMIServiceResponse.response_data)
}

// -------------------------------------------------------------------

// AudioServiceRequest

// string request_data = 1;
inline void AudioServiceRequest::clear_request_data() {
  request_data_.ClearToEmpty();
}
inline const std::string& AudioServiceRequest::request_data() const {
  // @@protoc_insertion_point(field_get:service.AudioServiceRequest.request_data)
  return _internal_request_data();
}
inline void AudioServiceRequest::set_request_data(const std::string& value) {
  _internal_set_request_data(value);
  // @@protoc_insertion_point(field_set:service.AudioServiceRequest.request_data)
}
inline std::string* AudioServiceRequest::mutable_request_data() {
  // @@protoc_insertion_point(field_mutable:service.AudioServiceRequest.request_data)
  return _internal_mutable_request_data();
}
inline const std::string& AudioServiceRequest::_internal_request_data() const {
  return request_data_.Get();
}
inline void AudioServiceRequest::_internal_set_request_data(const std::string& value) {
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioServiceRequest::set_request_data(std::string&& value) {
  
  request_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.AudioServiceRequest.request_data)
}
inline void AudioServiceRequest::set_request_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.AudioServiceRequest.request_data)
}
inline void AudioServiceRequest::set_request_data(const char* value,
    size_t size) {
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.AudioServiceRequest.request_data)
}
inline std::string* AudioServiceRequest::_internal_mutable_request_data() {
  
  return request_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioServiceRequest::release_request_data() {
  // @@protoc_insertion_point(field_release:service.AudioServiceRequest.request_data)
  return request_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioServiceRequest::set_allocated_request_data(std::string* request_data) {
  if (request_data != nullptr) {
    
  } else {
    
  }
  request_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.AudioServiceRequest.request_data)
}

// -------------------------------------------------------------------

// AudioServiceResponse

// string response_data = 1;
inline void AudioServiceResponse::clear_response_data() {
  response_data_.ClearToEmpty();
}
inline const std::string& AudioServiceResponse::response_data() const {
  // @@protoc_insertion_point(field_get:service.AudioServiceResponse.response_data)
  return _internal_response_data();
}
inline void AudioServiceResponse::set_response_data(const std::string& value) {
  _internal_set_response_data(value);
  // @@protoc_insertion_point(field_set:service.AudioServiceResponse.response_data)
}
inline std::string* AudioServiceResponse::mutable_response_data() {
  // @@protoc_insertion_point(field_mutable:service.AudioServiceResponse.response_data)
  return _internal_mutable_response_data();
}
inline const std::string& AudioServiceResponse::_internal_response_data() const {
  return response_data_.Get();
}
inline void AudioServiceResponse::_internal_set_response_data(const std::string& value) {
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioServiceResponse::set_response_data(std::string&& value) {
  
  response_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.AudioServiceResponse.response_data)
}
inline void AudioServiceResponse::set_response_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.AudioServiceResponse.response_data)
}
inline void AudioServiceResponse::set_response_data(const char* value,
    size_t size) {
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.AudioServiceResponse.response_data)
}
inline std::string* AudioServiceResponse::_internal_mutable_response_data() {
  
  return response_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioServiceResponse::release_response_data() {
  // @@protoc_insertion_point(field_release:service.AudioServiceResponse.response_data)
  return response_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioServiceResponse::set_allocated_response_data(std::string* response_data) {
  if (response_data != nullptr) {
    
  } else {
    
  }
  response_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.AudioServiceResponse.response_data)
}

// -------------------------------------------------------------------

// MQTTServiceRequest

// string request_data = 1;
inline void MQTTServiceRequest::clear_request_data() {
  request_data_.ClearToEmpty();
}
inline const std::string& MQTTServiceRequest::request_data() const {
  // @@protoc_insertion_point(field_get:service.MQTTServiceRequest.request_data)
  return _internal_request_data();
}
inline void MQTTServiceRequest::set_request_data(const std::string& value) {
  _internal_set_request_data(value);
  // @@protoc_insertion_point(field_set:service.MQTTServiceRequest.request_data)
}
inline std::string* MQTTServiceRequest::mutable_request_data() {
  // @@protoc_insertion_point(field_mutable:service.MQTTServiceRequest.request_data)
  return _internal_mutable_request_data();
}
inline const std::string& MQTTServiceRequest::_internal_request_data() const {
  return request_data_.Get();
}
inline void MQTTServiceRequest::_internal_set_request_data(const std::string& value) {
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MQTTServiceRequest::set_request_data(std::string&& value) {
  
  request_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.MQTTServiceRequest.request_data)
}
inline void MQTTServiceRequest::set_request_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.MQTTServiceRequest.request_data)
}
inline void MQTTServiceRequest::set_request_data(const char* value,
    size_t size) {
  
  request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.MQTTServiceRequest.request_data)
}
inline std::string* MQTTServiceRequest::_internal_mutable_request_data() {
  
  return request_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MQTTServiceRequest::release_request_data() {
  // @@protoc_insertion_point(field_release:service.MQTTServiceRequest.request_data)
  return request_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MQTTServiceRequest::set_allocated_request_data(std::string* request_data) {
  if (request_data != nullptr) {
    
  } else {
    
  }
  request_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.MQTTServiceRequest.request_data)
}

// -------------------------------------------------------------------

// MQTTServiceResponse

// string response_data = 1;
inline void MQTTServiceResponse::clear_response_data() {
  response_data_.ClearToEmpty();
}
inline const std::string& MQTTServiceResponse::response_data() const {
  // @@protoc_insertion_point(field_get:service.MQTTServiceResponse.response_data)
  return _internal_response_data();
}
inline void MQTTServiceResponse::set_response_data(const std::string& value) {
  _internal_set_response_data(value);
  // @@protoc_insertion_point(field_set:service.MQTTServiceResponse.response_data)
}
inline std::string* MQTTServiceResponse::mutable_response_data() {
  // @@protoc_insertion_point(field_mutable:service.MQTTServiceResponse.response_data)
  return _internal_mutable_response_data();
}
inline const std::string& MQTTServiceResponse::_internal_response_data() const {
  return response_data_.Get();
}
inline void MQTTServiceResponse::_internal_set_response_data(const std::string& value) {
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MQTTServiceResponse::set_response_data(std::string&& value) {
  
  response_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.MQTTServiceResponse.response_data)
}
inline void MQTTServiceResponse::set_response_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.MQTTServiceResponse.response_data)
}
inline void MQTTServiceResponse::set_response_data(const char* value,
    size_t size) {
  
  response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.MQTTServiceResponse.response_data)
}
inline std::string* MQTTServiceResponse::_internal_mutable_response_data() {
  
  return response_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MQTTServiceResponse::release_response_data() {
  // @@protoc_insertion_point(field_release:service.MQTTServiceResponse.response_data)
  return response_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MQTTServiceResponse::set_allocated_response_data(std::string* response_data) {
  if (response_data != nullptr) {
    
  } else {
    
  }
  response_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.MQTTServiceResponse.response_data)
}

// -------------------------------------------------------------------

// HMIDataRequest

// string data = 1;
inline void HMIDataRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& HMIDataRequest::data() const {
  // @@protoc_insertion_point(field_get:service.HMIDataRequest.data)
  return _internal_data();
}
inline void HMIDataRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:service.HMIDataRequest.data)
}
inline std::string* HMIDataRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:service.HMIDataRequest.data)
  return _internal_mutable_data();
}
inline const std::string& HMIDataRequest::_internal_data() const {
  return data_.Get();
}
inline void HMIDataRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HMIDataRequest::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.HMIDataRequest.data)
}
inline void HMIDataRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.HMIDataRequest.data)
}
inline void HMIDataRequest::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.HMIDataRequest.data)
}
inline std::string* HMIDataRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HMIDataRequest::release_data() {
  // @@protoc_insertion_point(field_release:service.HMIDataRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HMIDataRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.HMIDataRequest.data)
}

// -------------------------------------------------------------------

// HMIDataResponse

// bool success = 1;
inline void HMIDataResponse::clear_success() {
  success_ = false;
}
inline bool HMIDataResponse::_internal_success() const {
  return success_;
}
inline bool HMIDataResponse::success() const {
  // @@protoc_insertion_point(field_get:service.HMIDataResponse.success)
  return _internal_success();
}
inline void HMIDataResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void HMIDataResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:service.HMIDataResponse.success)
}

// -------------------------------------------------------------------

// MQTTDataRequest

// string data = 1;
inline void MQTTDataRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& MQTTDataRequest::data() const {
  // @@protoc_insertion_point(field_get:service.MQTTDataRequest.data)
  return _internal_data();
}
inline void MQTTDataRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:service.MQTTDataRequest.data)
}
inline std::string* MQTTDataRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:service.MQTTDataRequest.data)
  return _internal_mutable_data();
}
inline const std::string& MQTTDataRequest::_internal_data() const {
  return data_.Get();
}
inline void MQTTDataRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MQTTDataRequest::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.MQTTDataRequest.data)
}
inline void MQTTDataRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.MQTTDataRequest.data)
}
inline void MQTTDataRequest::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.MQTTDataRequest.data)
}
inline std::string* MQTTDataRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MQTTDataRequest::release_data() {
  // @@protoc_insertion_point(field_release:service.MQTTDataRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MQTTDataRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.MQTTDataRequest.data)
}

// -------------------------------------------------------------------

// MQTTDataResponse

// bool success = 1;
inline void MQTTDataResponse::clear_success() {
  success_ = false;
}
inline bool MQTTDataResponse::_internal_success() const {
  return success_;
}
inline bool MQTTDataResponse::success() const {
  // @@protoc_insertion_point(field_get:service.MQTTDataResponse.success)
  return _internal_success();
}
inline void MQTTDataResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void MQTTDataResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:service.MQTTDataResponse.success)
}

// -------------------------------------------------------------------

// AudioDataRequest

// string data = 1;
inline void AudioDataRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& AudioDataRequest::data() const {
  // @@protoc_insertion_point(field_get:service.AudioDataRequest.data)
  return _internal_data();
}
inline void AudioDataRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:service.AudioDataRequest.data)
}
inline std::string* AudioDataRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:service.AudioDataRequest.data)
  return _internal_mutable_data();
}
inline const std::string& AudioDataRequest::_internal_data() const {
  return data_.Get();
}
inline void AudioDataRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AudioDataRequest::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:service.AudioDataRequest.data)
}
inline void AudioDataRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:service.AudioDataRequest.data)
}
inline void AudioDataRequest::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:service.AudioDataRequest.data)
}
inline std::string* AudioDataRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AudioDataRequest::release_data() {
  // @@protoc_insertion_point(field_release:service.AudioDataRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AudioDataRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:service.AudioDataRequest.data)
}

// -------------------------------------------------------------------

// AudioDataResponse

// bool success = 1;
inline void AudioDataResponse::clear_success() {
  success_ = false;
}
inline bool AudioDataResponse::_internal_success() const {
  return success_;
}
inline bool AudioDataResponse::success() const {
  // @@protoc_insertion_point(field_get:service.AudioDataResponse.success)
  return _internal_success();
}
inline void AudioDataResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AudioDataResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:service.AudioDataResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2eproto
