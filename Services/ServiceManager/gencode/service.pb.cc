// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace service {
constexpr RegisterHMIRequest::RegisterHMIRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RegisterHMIRequestDefaultTypeInternal {
  constexpr RegisterHMIRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterHMIRequestDefaultTypeInternal() {}
  union {
    RegisterHMIRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterHMIRequestDefaultTypeInternal _RegisterHMIRequest_default_instance_;
constexpr RegisterHMIResponse::RegisterHMIResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct RegisterHMIResponseDefaultTypeInternal {
  constexpr RegisterHMIResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterHMIResponseDefaultTypeInternal() {}
  union {
    RegisterHMIResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterHMIResponseDefaultTypeInternal _RegisterHMIResponse_default_instance_;
constexpr RegisterAudioRequest::RegisterAudioRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RegisterAudioRequestDefaultTypeInternal {
  constexpr RegisterAudioRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterAudioRequestDefaultTypeInternal() {}
  union {
    RegisterAudioRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterAudioRequestDefaultTypeInternal _RegisterAudioRequest_default_instance_;
constexpr RegisterAudioResponse::RegisterAudioResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct RegisterAudioResponseDefaultTypeInternal {
  constexpr RegisterAudioResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterAudioResponseDefaultTypeInternal() {}
  union {
    RegisterAudioResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterAudioResponseDefaultTypeInternal _RegisterAudioResponse_default_instance_;
constexpr RegisterMQTTRequest::RegisterMQTTRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RegisterMQTTRequestDefaultTypeInternal {
  constexpr RegisterMQTTRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterMQTTRequestDefaultTypeInternal() {}
  union {
    RegisterMQTTRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterMQTTRequestDefaultTypeInternal _RegisterMQTTRequest_default_instance_;
constexpr RegisterMQTTResponse::RegisterMQTTResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct RegisterMQTTResponseDefaultTypeInternal {
  constexpr RegisterMQTTResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterMQTTResponseDefaultTypeInternal() {}
  union {
    RegisterMQTTResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterMQTTResponseDefaultTypeInternal _RegisterMQTTResponse_default_instance_;
constexpr HMIServiceRequest::HMIServiceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HMIServiceRequestDefaultTypeInternal {
  constexpr HMIServiceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HMIServiceRequestDefaultTypeInternal() {}
  union {
    HMIServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HMIServiceRequestDefaultTypeInternal _HMIServiceRequest_default_instance_;
constexpr HMIServiceResponse::HMIServiceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HMIServiceResponseDefaultTypeInternal {
  constexpr HMIServiceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HMIServiceResponseDefaultTypeInternal() {}
  union {
    HMIServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HMIServiceResponseDefaultTypeInternal _HMIServiceResponse_default_instance_;
constexpr AudioServiceRequest::AudioServiceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AudioServiceRequestDefaultTypeInternal {
  constexpr AudioServiceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioServiceRequestDefaultTypeInternal() {}
  union {
    AudioServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioServiceRequestDefaultTypeInternal _AudioServiceRequest_default_instance_;
constexpr AudioServiceResponse::AudioServiceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AudioServiceResponseDefaultTypeInternal {
  constexpr AudioServiceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioServiceResponseDefaultTypeInternal() {}
  union {
    AudioServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioServiceResponseDefaultTypeInternal _AudioServiceResponse_default_instance_;
constexpr MQTTServiceRequest::MQTTServiceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MQTTServiceRequestDefaultTypeInternal {
  constexpr MQTTServiceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MQTTServiceRequestDefaultTypeInternal() {}
  union {
    MQTTServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MQTTServiceRequestDefaultTypeInternal _MQTTServiceRequest_default_instance_;
constexpr MQTTServiceResponse::MQTTServiceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MQTTServiceResponseDefaultTypeInternal {
  constexpr MQTTServiceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MQTTServiceResponseDefaultTypeInternal() {}
  union {
    MQTTServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MQTTServiceResponseDefaultTypeInternal _MQTTServiceResponse_default_instance_;
constexpr HMIDataRequest::HMIDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HMIDataRequestDefaultTypeInternal {
  constexpr HMIDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HMIDataRequestDefaultTypeInternal() {}
  union {
    HMIDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HMIDataRequestDefaultTypeInternal _HMIDataRequest_default_instance_;
constexpr HMIDataResponse::HMIDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct HMIDataResponseDefaultTypeInternal {
  constexpr HMIDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HMIDataResponseDefaultTypeInternal() {}
  union {
    HMIDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HMIDataResponseDefaultTypeInternal _HMIDataResponse_default_instance_;
constexpr MQTTDataRequest::MQTTDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MQTTDataRequestDefaultTypeInternal {
  constexpr MQTTDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MQTTDataRequestDefaultTypeInternal() {}
  union {
    MQTTDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MQTTDataRequestDefaultTypeInternal _MQTTDataRequest_default_instance_;
constexpr MQTTDataResponse::MQTTDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct MQTTDataResponseDefaultTypeInternal {
  constexpr MQTTDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MQTTDataResponseDefaultTypeInternal() {}
  union {
    MQTTDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MQTTDataResponseDefaultTypeInternal _MQTTDataResponse_default_instance_;
constexpr AudioDataRequest::AudioDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AudioDataRequestDefaultTypeInternal {
  constexpr AudioDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioDataRequestDefaultTypeInternal() {}
  union {
    AudioDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioDataRequestDefaultTypeInternal _AudioDataRequest_default_instance_;
constexpr AudioDataResponse::AudioDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct AudioDataResponseDefaultTypeInternal {
  constexpr AudioDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioDataResponseDefaultTypeInternal() {}
  union {
    AudioDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioDataResponseDefaultTypeInternal _AudioDataResponse_default_instance_;
}  // namespace service
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_service_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_service_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_service_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_service_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::RegisterHMIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::RegisterHMIRequest, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::RegisterHMIResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::RegisterHMIResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::RegisterAudioRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::RegisterAudioRequest, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::RegisterAudioResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::RegisterAudioResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::RegisterMQTTRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::RegisterMQTTRequest, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::RegisterMQTTResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::RegisterMQTTResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::HMIServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::HMIServiceRequest, request_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::HMIServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::HMIServiceResponse, response_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::AudioServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::AudioServiceRequest, request_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::AudioServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::AudioServiceResponse, response_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::MQTTServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::MQTTServiceRequest, request_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::MQTTServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::MQTTServiceResponse, response_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::HMIDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::HMIDataRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::HMIDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::HMIDataResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::MQTTDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::MQTTDataRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::MQTTDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::MQTTDataResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::AudioDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::AudioDataRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::service::AudioDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::service::AudioDataResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::service::RegisterHMIRequest)},
  { 6, -1, sizeof(::service::RegisterHMIResponse)},
  { 12, -1, sizeof(::service::RegisterAudioRequest)},
  { 18, -1, sizeof(::service::RegisterAudioResponse)},
  { 24, -1, sizeof(::service::RegisterMQTTRequest)},
  { 30, -1, sizeof(::service::RegisterMQTTResponse)},
  { 36, -1, sizeof(::service::HMIServiceRequest)},
  { 42, -1, sizeof(::service::HMIServiceResponse)},
  { 48, -1, sizeof(::service::AudioServiceRequest)},
  { 54, -1, sizeof(::service::AudioServiceResponse)},
  { 60, -1, sizeof(::service::MQTTServiceRequest)},
  { 66, -1, sizeof(::service::MQTTServiceResponse)},
  { 72, -1, sizeof(::service::HMIDataRequest)},
  { 78, -1, sizeof(::service::HMIDataResponse)},
  { 84, -1, sizeof(::service::MQTTDataRequest)},
  { 90, -1, sizeof(::service::MQTTDataResponse)},
  { 96, -1, sizeof(::service::AudioDataRequest)},
  { 102, -1, sizeof(::service::AudioDataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_RegisterHMIRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_RegisterHMIResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_RegisterAudioRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_RegisterAudioResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_RegisterMQTTRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_RegisterMQTTResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_HMIServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_HMIServiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_AudioServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_AudioServiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_MQTTServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_MQTTServiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_HMIDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_HMIDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_MQTTDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_MQTTDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_AudioDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::service::_AudioDataResponse_default_instance_),
};

const char descriptor_table_protodef_service_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rservice.proto\022\007service\"\'\n\022RegisterHMIR"
  "equest\022\021\n\tclient_id\030\001 \001(\t\"&\n\023RegisterHMI"
  "Response\022\017\n\007success\030\001 \001(\010\")\n\024RegisterAud"
  "ioRequest\022\021\n\tclient_id\030\001 \001(\t\"(\n\025Register"
  "AudioResponse\022\017\n\007success\030\001 \001(\010\"(\n\023Regist"
  "erMQTTRequest\022\021\n\tclient_id\030\001 \001(\t\"\'\n\024Regi"
  "sterMQTTResponse\022\017\n\007success\030\001 \001(\010\")\n\021HMI"
  "ServiceRequest\022\024\n\014request_data\030\001 \001(\t\"+\n\022"
  "HMIServiceResponse\022\025\n\rresponse_data\030\001 \001("
  "\t\"+\n\023AudioServiceRequest\022\024\n\014request_data"
  "\030\001 \001(\t\"-\n\024AudioServiceResponse\022\025\n\rrespon"
  "se_data\030\001 \001(\t\"*\n\022MQTTServiceRequest\022\024\n\014r"
  "equest_data\030\001 \001(\t\",\n\023MQTTServiceResponse"
  "\022\025\n\rresponse_data\030\001 \001(\t\"\036\n\016HMIDataReques"
  "t\022\014\n\004data\030\001 \001(\t\"\"\n\017HMIDataResponse\022\017\n\007su"
  "ccess\030\001 \001(\010\"\037\n\017MQTTDataRequest\022\014\n\004data\030\001"
  " \001(\t\"#\n\020MQTTDataResponse\022\017\n\007success\030\001 \001("
  "\010\" \n\020AudioDataRequest\022\014\n\004data\030\001 \001(\t\"$\n\021A"
  "udioDataResponse\022\017\n\007success\030\001 \001(\0102\262\001\n\014Au"
  "dioAdapter\022P\n\027requestPlayAudioAdapter\022\031."
  "service.AudioDataRequest\032\032.service.Audio"
  "DataResponse\022P\n\027requestStopAudioAdapter\022"
  "\031.service.AudioDataRequest\032\032.service.Aud"
  "ioDataResponse2Z\n\nHMIAdapter\022L\n\027requestB"
  "uttonHMIAdapter\022\027.service.HMIDataRequest"
  "\032\030.service.HMIDataResponse2a\n\013MQTTAdapte"
  "r\022R\n\033sendTriggerDataCANToMQTTSrv\022\030.servi"
  "ce.MQTTDataRequest\032\031.service.MQTTDataRes"
  "ponse2\225\002\n\016ServiceManager\022R\n\025registerHMIM"
  "grService\022\033.service.RegisterHMIRequest\032\034"
  ".service.RegisterHMIResponse\022X\n\027register"
  "AudioMgrService\022\035.service.RegisterAudioR"
  "equest\032\036.service.RegisterAudioResponse\022U"
  "\n\026registerMQTTMgrService\022\034.service.Regis"
  "terMQTTRequest\032\035.service.RegisterMQTTRes"
  "ponse2\235\001\n\006HMISrv\022I\n\016registerHMISrv\022\032.ser"
  "vice.HMIServiceRequest\032\033.service.HMIServ"
  "iceResponse\022H\n\023requestButtonHMISrv\022\027.ser"
  "vice.HMIDataRequest\032\030.service.HMIDataRes"
  "ponse2\367\001\n\010AudioSrv\022O\n\020registerAudioSrv\022\034"
  ".service.AudioServiceRequest\032\035.service.A"
  "udioServiceResponse\022L\n\023receivePlayAudioS"
  "rv\022\031.service.AudioDataRequest\032\032.service."
  "AudioDataResponse\022L\n\023receiveStopAudioSrv"
  "\022\031.service.AudioDataRequest\032\032.service.Au"
  "dioDataResponse2\245\001\n\007MQTTSrv\022L\n\017registerM"
  "QTTSrv\022\033.service.MQTTServiceRequest\032\034.se"
  "rvice.MQTTServiceResponse\022L\n\025receiveTrig"
  "gerDataCAN\022\030.service.MQTTDataRequest\032\031.s"
  "ervice.MQTTDataResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_service_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2eproto = {
  false, false, 1991, descriptor_table_protodef_service_2eproto, "service.proto", 
  &descriptor_table_service_2eproto_once, nullptr, 0, 18,
  schemas, file_default_instances, TableStruct_service_2eproto::offsets,
  file_level_metadata_service_2eproto, file_level_enum_descriptors_service_2eproto, file_level_service_descriptors_service_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_service_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return descriptor_table_service_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_service_2eproto(&descriptor_table_service_2eproto);
namespace service {

// ===================================================================

class RegisterHMIRequest::_Internal {
 public:
};

RegisterHMIRequest::RegisterHMIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.RegisterHMIRequest)
}
RegisterHMIRequest::RegisterHMIRequest(const RegisterHMIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.RegisterHMIRequest)
}

void RegisterHMIRequest::SharedCtor() {
client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterHMIRequest::~RegisterHMIRequest() {
  // @@protoc_insertion_point(destructor:service.RegisterHMIRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterHMIRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterHMIRequest::ArenaDtor(void* object) {
  RegisterHMIRequest* _this = reinterpret_cast< RegisterHMIRequest* >(object);
  (void)_this;
}
void RegisterHMIRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterHMIRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterHMIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.RegisterHMIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterHMIRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.RegisterHMIRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterHMIRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.RegisterHMIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.RegisterHMIRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.RegisterHMIRequest)
  return target;
}

size_t RegisterHMIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.RegisterHMIRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterHMIRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.RegisterHMIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterHMIRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterHMIRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.RegisterHMIRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.RegisterHMIRequest)
    MergeFrom(*source);
  }
}

void RegisterHMIRequest::MergeFrom(const RegisterHMIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.RegisterHMIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {
    _internal_set_client_id(from._internal_client_id());
  }
}

void RegisterHMIRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.RegisterHMIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterHMIRequest::CopyFrom(const RegisterHMIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.RegisterHMIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterHMIRequest::IsInitialized() const {
  return true;
}

void RegisterHMIRequest::InternalSwap(RegisterHMIRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterHMIRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegisterHMIResponse::_Internal {
 public:
};

RegisterHMIResponse::RegisterHMIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.RegisterHMIResponse)
}
RegisterHMIResponse::RegisterHMIResponse(const RegisterHMIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:service.RegisterHMIResponse)
}

void RegisterHMIResponse::SharedCtor() {
success_ = false;
}

RegisterHMIResponse::~RegisterHMIResponse() {
  // @@protoc_insertion_point(destructor:service.RegisterHMIResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterHMIResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegisterHMIResponse::ArenaDtor(void* object) {
  RegisterHMIResponse* _this = reinterpret_cast< RegisterHMIResponse* >(object);
  (void)_this;
}
void RegisterHMIResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterHMIResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterHMIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.RegisterHMIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterHMIResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterHMIResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.RegisterHMIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.RegisterHMIResponse)
  return target;
}

size_t RegisterHMIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.RegisterHMIResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterHMIResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.RegisterHMIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterHMIResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterHMIResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.RegisterHMIResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.RegisterHMIResponse)
    MergeFrom(*source);
  }
}

void RegisterHMIResponse::MergeFrom(const RegisterHMIResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.RegisterHMIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RegisterHMIResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.RegisterHMIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterHMIResponse::CopyFrom(const RegisterHMIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.RegisterHMIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterHMIResponse::IsInitialized() const {
  return true;
}

void RegisterHMIResponse::InternalSwap(RegisterHMIResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterHMIResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegisterAudioRequest::_Internal {
 public:
};

RegisterAudioRequest::RegisterAudioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.RegisterAudioRequest)
}
RegisterAudioRequest::RegisterAudioRequest(const RegisterAudioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.RegisterAudioRequest)
}

void RegisterAudioRequest::SharedCtor() {
client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterAudioRequest::~RegisterAudioRequest() {
  // @@protoc_insertion_point(destructor:service.RegisterAudioRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterAudioRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterAudioRequest::ArenaDtor(void* object) {
  RegisterAudioRequest* _this = reinterpret_cast< RegisterAudioRequest* >(object);
  (void)_this;
}
void RegisterAudioRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterAudioRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterAudioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.RegisterAudioRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterAudioRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.RegisterAudioRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterAudioRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.RegisterAudioRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.RegisterAudioRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.RegisterAudioRequest)
  return target;
}

size_t RegisterAudioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.RegisterAudioRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterAudioRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.RegisterAudioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterAudioRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterAudioRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.RegisterAudioRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.RegisterAudioRequest)
    MergeFrom(*source);
  }
}

void RegisterAudioRequest::MergeFrom(const RegisterAudioRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.RegisterAudioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {
    _internal_set_client_id(from._internal_client_id());
  }
}

void RegisterAudioRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.RegisterAudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAudioRequest::CopyFrom(const RegisterAudioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.RegisterAudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAudioRequest::IsInitialized() const {
  return true;
}

void RegisterAudioRequest::InternalSwap(RegisterAudioRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterAudioRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegisterAudioResponse::_Internal {
 public:
};

RegisterAudioResponse::RegisterAudioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.RegisterAudioResponse)
}
RegisterAudioResponse::RegisterAudioResponse(const RegisterAudioResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:service.RegisterAudioResponse)
}

void RegisterAudioResponse::SharedCtor() {
success_ = false;
}

RegisterAudioResponse::~RegisterAudioResponse() {
  // @@protoc_insertion_point(destructor:service.RegisterAudioResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterAudioResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegisterAudioResponse::ArenaDtor(void* object) {
  RegisterAudioResponse* _this = reinterpret_cast< RegisterAudioResponse* >(object);
  (void)_this;
}
void RegisterAudioResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterAudioResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterAudioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.RegisterAudioResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterAudioResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterAudioResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.RegisterAudioResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.RegisterAudioResponse)
  return target;
}

size_t RegisterAudioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.RegisterAudioResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterAudioResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.RegisterAudioResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterAudioResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterAudioResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.RegisterAudioResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.RegisterAudioResponse)
    MergeFrom(*source);
  }
}

void RegisterAudioResponse::MergeFrom(const RegisterAudioResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.RegisterAudioResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RegisterAudioResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.RegisterAudioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAudioResponse::CopyFrom(const RegisterAudioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.RegisterAudioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAudioResponse::IsInitialized() const {
  return true;
}

void RegisterAudioResponse::InternalSwap(RegisterAudioResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterAudioResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegisterMQTTRequest::_Internal {
 public:
};

RegisterMQTTRequest::RegisterMQTTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.RegisterMQTTRequest)
}
RegisterMQTTRequest::RegisterMQTTRequest(const RegisterMQTTRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.RegisterMQTTRequest)
}

void RegisterMQTTRequest::SharedCtor() {
client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterMQTTRequest::~RegisterMQTTRequest() {
  // @@protoc_insertion_point(destructor:service.RegisterMQTTRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterMQTTRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterMQTTRequest::ArenaDtor(void* object) {
  RegisterMQTTRequest* _this = reinterpret_cast< RegisterMQTTRequest* >(object);
  (void)_this;
}
void RegisterMQTTRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterMQTTRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterMQTTRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.RegisterMQTTRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterMQTTRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.RegisterMQTTRequest.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterMQTTRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.RegisterMQTTRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.RegisterMQTTRequest.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.RegisterMQTTRequest)
  return target;
}

size_t RegisterMQTTRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.RegisterMQTTRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterMQTTRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.RegisterMQTTRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterMQTTRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterMQTTRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.RegisterMQTTRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.RegisterMQTTRequest)
    MergeFrom(*source);
  }
}

void RegisterMQTTRequest::MergeFrom(const RegisterMQTTRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.RegisterMQTTRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id().size() > 0) {
    _internal_set_client_id(from._internal_client_id());
  }
}

void RegisterMQTTRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.RegisterMQTTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMQTTRequest::CopyFrom(const RegisterMQTTRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.RegisterMQTTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMQTTRequest::IsInitialized() const {
  return true;
}

void RegisterMQTTRequest::InternalSwap(RegisterMQTTRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterMQTTRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegisterMQTTResponse::_Internal {
 public:
};

RegisterMQTTResponse::RegisterMQTTResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.RegisterMQTTResponse)
}
RegisterMQTTResponse::RegisterMQTTResponse(const RegisterMQTTResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:service.RegisterMQTTResponse)
}

void RegisterMQTTResponse::SharedCtor() {
success_ = false;
}

RegisterMQTTResponse::~RegisterMQTTResponse() {
  // @@protoc_insertion_point(destructor:service.RegisterMQTTResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterMQTTResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegisterMQTTResponse::ArenaDtor(void* object) {
  RegisterMQTTResponse* _this = reinterpret_cast< RegisterMQTTResponse* >(object);
  (void)_this;
}
void RegisterMQTTResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterMQTTResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterMQTTResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.RegisterMQTTResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterMQTTResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterMQTTResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.RegisterMQTTResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.RegisterMQTTResponse)
  return target;
}

size_t RegisterMQTTResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.RegisterMQTTResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterMQTTResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.RegisterMQTTResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterMQTTResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterMQTTResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.RegisterMQTTResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.RegisterMQTTResponse)
    MergeFrom(*source);
  }
}

void RegisterMQTTResponse::MergeFrom(const RegisterMQTTResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.RegisterMQTTResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RegisterMQTTResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.RegisterMQTTResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterMQTTResponse::CopyFrom(const RegisterMQTTResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.RegisterMQTTResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterMQTTResponse::IsInitialized() const {
  return true;
}

void RegisterMQTTResponse::InternalSwap(RegisterMQTTResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterMQTTResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HMIServiceRequest::_Internal {
 public:
};

HMIServiceRequest::HMIServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.HMIServiceRequest)
}
HMIServiceRequest::HMIServiceRequest(const HMIServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_data().empty()) {
    request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.HMIServiceRequest)
}

void HMIServiceRequest::SharedCtor() {
request_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HMIServiceRequest::~HMIServiceRequest() {
  // @@protoc_insertion_point(destructor:service.HMIServiceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HMIServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HMIServiceRequest::ArenaDtor(void* object) {
  HMIServiceRequest* _this = reinterpret_cast< HMIServiceRequest* >(object);
  (void)_this;
}
void HMIServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HMIServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HMIServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.HMIServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMIServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.HMIServiceRequest.request_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.HMIServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_data = 1;
  if (this->request_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_data().data(), static_cast<int>(this->_internal_request_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.HMIServiceRequest.request_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.HMIServiceRequest)
  return target;
}

size_t HMIServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.HMIServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_data = 1;
  if (this->request_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.HMIServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.HMIServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.HMIServiceRequest)
    MergeFrom(*source);
  }
}

void HMIServiceRequest::MergeFrom(const HMIServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.HMIServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_data().size() > 0) {
    _internal_set_request_data(from._internal_request_data());
  }
}

void HMIServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.HMIServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIServiceRequest::CopyFrom(const HMIServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.HMIServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIServiceRequest::IsInitialized() const {
  return true;
}

void HMIServiceRequest::InternalSwap(HMIServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_data_.Swap(&other->request_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HMIServiceResponse::_Internal {
 public:
};

HMIServiceResponse::HMIServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.HMIServiceResponse)
}
HMIServiceResponse::HMIServiceResponse(const HMIServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_data().empty()) {
    response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.HMIServiceResponse)
}

void HMIServiceResponse::SharedCtor() {
response_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HMIServiceResponse::~HMIServiceResponse() {
  // @@protoc_insertion_point(destructor:service.HMIServiceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HMIServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HMIServiceResponse::ArenaDtor(void* object) {
  HMIServiceResponse* _this = reinterpret_cast< HMIServiceResponse* >(object);
  (void)_this;
}
void HMIServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HMIServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HMIServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.HMIServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMIServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.HMIServiceResponse.response_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.HMIServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response_data = 1;
  if (this->response_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_data().data(), static_cast<int>(this->_internal_response_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.HMIServiceResponse.response_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.HMIServiceResponse)
  return target;
}

size_t HMIServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.HMIServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_data = 1;
  if (this->response_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.HMIServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.HMIServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.HMIServiceResponse)
    MergeFrom(*source);
  }
}

void HMIServiceResponse::MergeFrom(const HMIServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.HMIServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_data().size() > 0) {
    _internal_set_response_data(from._internal_response_data());
  }
}

void HMIServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.HMIServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIServiceResponse::CopyFrom(const HMIServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.HMIServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIServiceResponse::IsInitialized() const {
  return true;
}

void HMIServiceResponse::InternalSwap(HMIServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_data_.Swap(&other->response_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioServiceRequest::_Internal {
 public:
};

AudioServiceRequest::AudioServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.AudioServiceRequest)
}
AudioServiceRequest::AudioServiceRequest(const AudioServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_data().empty()) {
    request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.AudioServiceRequest)
}

void AudioServiceRequest::SharedCtor() {
request_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioServiceRequest::~AudioServiceRequest() {
  // @@protoc_insertion_point(destructor:service.AudioServiceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioServiceRequest::ArenaDtor(void* object) {
  AudioServiceRequest* _this = reinterpret_cast< AudioServiceRequest* >(object);
  (void)_this;
}
void AudioServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.AudioServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.AudioServiceRequest.request_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.AudioServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_data = 1;
  if (this->request_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_data().data(), static_cast<int>(this->_internal_request_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.AudioServiceRequest.request_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.AudioServiceRequest)
  return target;
}

size_t AudioServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.AudioServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_data = 1;
  if (this->request_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.AudioServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.AudioServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.AudioServiceRequest)
    MergeFrom(*source);
  }
}

void AudioServiceRequest::MergeFrom(const AudioServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.AudioServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_data().size() > 0) {
    _internal_set_request_data(from._internal_request_data());
  }
}

void AudioServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.AudioServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioServiceRequest::CopyFrom(const AudioServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.AudioServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioServiceRequest::IsInitialized() const {
  return true;
}

void AudioServiceRequest::InternalSwap(AudioServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_data_.Swap(&other->request_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioServiceResponse::_Internal {
 public:
};

AudioServiceResponse::AudioServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.AudioServiceResponse)
}
AudioServiceResponse::AudioServiceResponse(const AudioServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_data().empty()) {
    response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.AudioServiceResponse)
}

void AudioServiceResponse::SharedCtor() {
response_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioServiceResponse::~AudioServiceResponse() {
  // @@protoc_insertion_point(destructor:service.AudioServiceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioServiceResponse::ArenaDtor(void* object) {
  AudioServiceResponse* _this = reinterpret_cast< AudioServiceResponse* >(object);
  (void)_this;
}
void AudioServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.AudioServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.AudioServiceResponse.response_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.AudioServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response_data = 1;
  if (this->response_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_data().data(), static_cast<int>(this->_internal_response_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.AudioServiceResponse.response_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.AudioServiceResponse)
  return target;
}

size_t AudioServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.AudioServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_data = 1;
  if (this->response_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.AudioServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.AudioServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.AudioServiceResponse)
    MergeFrom(*source);
  }
}

void AudioServiceResponse::MergeFrom(const AudioServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.AudioServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_data().size() > 0) {
    _internal_set_response_data(from._internal_response_data());
  }
}

void AudioServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.AudioServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioServiceResponse::CopyFrom(const AudioServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.AudioServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioServiceResponse::IsInitialized() const {
  return true;
}

void AudioServiceResponse::InternalSwap(AudioServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_data_.Swap(&other->response_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MQTTServiceRequest::_Internal {
 public:
};

MQTTServiceRequest::MQTTServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.MQTTServiceRequest)
}
MQTTServiceRequest::MQTTServiceRequest(const MQTTServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_data().empty()) {
    request_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.MQTTServiceRequest)
}

void MQTTServiceRequest::SharedCtor() {
request_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MQTTServiceRequest::~MQTTServiceRequest() {
  // @@protoc_insertion_point(destructor:service.MQTTServiceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MQTTServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MQTTServiceRequest::ArenaDtor(void* object) {
  MQTTServiceRequest* _this = reinterpret_cast< MQTTServiceRequest* >(object);
  (void)_this;
}
void MQTTServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MQTTServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MQTTServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.MQTTServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MQTTServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.MQTTServiceRequest.request_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MQTTServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.MQTTServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_data = 1;
  if (this->request_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_data().data(), static_cast<int>(this->_internal_request_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.MQTTServiceRequest.request_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.MQTTServiceRequest)
  return target;
}

size_t MQTTServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.MQTTServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_data = 1;
  if (this->request_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MQTTServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.MQTTServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MQTTServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MQTTServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.MQTTServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.MQTTServiceRequest)
    MergeFrom(*source);
  }
}

void MQTTServiceRequest::MergeFrom(const MQTTServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.MQTTServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_data().size() > 0) {
    _internal_set_request_data(from._internal_request_data());
  }
}

void MQTTServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.MQTTServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MQTTServiceRequest::CopyFrom(const MQTTServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.MQTTServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MQTTServiceRequest::IsInitialized() const {
  return true;
}

void MQTTServiceRequest::InternalSwap(MQTTServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_data_.Swap(&other->request_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MQTTServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MQTTServiceResponse::_Internal {
 public:
};

MQTTServiceResponse::MQTTServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.MQTTServiceResponse)
}
MQTTServiceResponse::MQTTServiceResponse(const MQTTServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_data().empty()) {
    response_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.MQTTServiceResponse)
}

void MQTTServiceResponse::SharedCtor() {
response_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MQTTServiceResponse::~MQTTServiceResponse() {
  // @@protoc_insertion_point(destructor:service.MQTTServiceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MQTTServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MQTTServiceResponse::ArenaDtor(void* object) {
  MQTTServiceResponse* _this = reinterpret_cast< MQTTServiceResponse* >(object);
  (void)_this;
}
void MQTTServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MQTTServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MQTTServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.MQTTServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MQTTServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.MQTTServiceResponse.response_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MQTTServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.MQTTServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response_data = 1;
  if (this->response_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_data().data(), static_cast<int>(this->_internal_response_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.MQTTServiceResponse.response_data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.MQTTServiceResponse)
  return target;
}

size_t MQTTServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.MQTTServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_data = 1;
  if (this->response_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MQTTServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.MQTTServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MQTTServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MQTTServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.MQTTServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.MQTTServiceResponse)
    MergeFrom(*source);
  }
}

void MQTTServiceResponse::MergeFrom(const MQTTServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.MQTTServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_data().size() > 0) {
    _internal_set_response_data(from._internal_response_data());
  }
}

void MQTTServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.MQTTServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MQTTServiceResponse::CopyFrom(const MQTTServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.MQTTServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MQTTServiceResponse::IsInitialized() const {
  return true;
}

void MQTTServiceResponse::InternalSwap(MQTTServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_data_.Swap(&other->response_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MQTTServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HMIDataRequest::_Internal {
 public:
};

HMIDataRequest::HMIDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.HMIDataRequest)
}
HMIDataRequest::HMIDataRequest(const HMIDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.HMIDataRequest)
}

void HMIDataRequest::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HMIDataRequest::~HMIDataRequest() {
  // @@protoc_insertion_point(destructor:service.HMIDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HMIDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HMIDataRequest::ArenaDtor(void* object) {
  HMIDataRequest* _this = reinterpret_cast< HMIDataRequest* >(object);
  (void)_this;
}
void HMIDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HMIDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HMIDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.HMIDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMIDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.HMIDataRequest.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.HMIDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.HMIDataRequest.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.HMIDataRequest)
  return target;
}

size_t HMIDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.HMIDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.HMIDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.HMIDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.HMIDataRequest)
    MergeFrom(*source);
  }
}

void HMIDataRequest::MergeFrom(const HMIDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.HMIDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void HMIDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.HMIDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIDataRequest::CopyFrom(const HMIDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.HMIDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIDataRequest::IsInitialized() const {
  return true;
}

void HMIDataRequest::InternalSwap(HMIDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HMIDataResponse::_Internal {
 public:
};

HMIDataResponse::HMIDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.HMIDataResponse)
}
HMIDataResponse::HMIDataResponse(const HMIDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:service.HMIDataResponse)
}

void HMIDataResponse::SharedCtor() {
success_ = false;
}

HMIDataResponse::~HMIDataResponse() {
  // @@protoc_insertion_point(destructor:service.HMIDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HMIDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HMIDataResponse::ArenaDtor(void* object) {
  HMIDataResponse* _this = reinterpret_cast< HMIDataResponse* >(object);
  (void)_this;
}
void HMIDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HMIDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HMIDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.HMIDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HMIDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.HMIDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.HMIDataResponse)
  return target;
}

size_t HMIDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.HMIDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.HMIDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.HMIDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.HMIDataResponse)
    MergeFrom(*source);
  }
}

void HMIDataResponse::MergeFrom(const HMIDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.HMIDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void HMIDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.HMIDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIDataResponse::CopyFrom(const HMIDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.HMIDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIDataResponse::IsInitialized() const {
  return true;
}

void HMIDataResponse::InternalSwap(HMIDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MQTTDataRequest::_Internal {
 public:
};

MQTTDataRequest::MQTTDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.MQTTDataRequest)
}
MQTTDataRequest::MQTTDataRequest(const MQTTDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.MQTTDataRequest)
}

void MQTTDataRequest::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MQTTDataRequest::~MQTTDataRequest() {
  // @@protoc_insertion_point(destructor:service.MQTTDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MQTTDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MQTTDataRequest::ArenaDtor(void* object) {
  MQTTDataRequest* _this = reinterpret_cast< MQTTDataRequest* >(object);
  (void)_this;
}
void MQTTDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MQTTDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MQTTDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.MQTTDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MQTTDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.MQTTDataRequest.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MQTTDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.MQTTDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.MQTTDataRequest.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.MQTTDataRequest)
  return target;
}

size_t MQTTDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.MQTTDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MQTTDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.MQTTDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MQTTDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MQTTDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.MQTTDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.MQTTDataRequest)
    MergeFrom(*source);
  }
}

void MQTTDataRequest::MergeFrom(const MQTTDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.MQTTDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void MQTTDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.MQTTDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MQTTDataRequest::CopyFrom(const MQTTDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.MQTTDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MQTTDataRequest::IsInitialized() const {
  return true;
}

void MQTTDataRequest::InternalSwap(MQTTDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MQTTDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MQTTDataResponse::_Internal {
 public:
};

MQTTDataResponse::MQTTDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.MQTTDataResponse)
}
MQTTDataResponse::MQTTDataResponse(const MQTTDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:service.MQTTDataResponse)
}

void MQTTDataResponse::SharedCtor() {
success_ = false;
}

MQTTDataResponse::~MQTTDataResponse() {
  // @@protoc_insertion_point(destructor:service.MQTTDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MQTTDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MQTTDataResponse::ArenaDtor(void* object) {
  MQTTDataResponse* _this = reinterpret_cast< MQTTDataResponse* >(object);
  (void)_this;
}
void MQTTDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MQTTDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MQTTDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.MQTTDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MQTTDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MQTTDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.MQTTDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.MQTTDataResponse)
  return target;
}

size_t MQTTDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.MQTTDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MQTTDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.MQTTDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MQTTDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MQTTDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.MQTTDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.MQTTDataResponse)
    MergeFrom(*source);
  }
}

void MQTTDataResponse::MergeFrom(const MQTTDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.MQTTDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void MQTTDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.MQTTDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MQTTDataResponse::CopyFrom(const MQTTDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.MQTTDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MQTTDataResponse::IsInitialized() const {
  return true;
}

void MQTTDataResponse::InternalSwap(MQTTDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MQTTDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioDataRequest::_Internal {
 public:
};

AudioDataRequest::AudioDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.AudioDataRequest)
}
AudioDataRequest::AudioDataRequest(const AudioDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:service.AudioDataRequest)
}

void AudioDataRequest::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioDataRequest::~AudioDataRequest() {
  // @@protoc_insertion_point(destructor:service.AudioDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioDataRequest::ArenaDtor(void* object) {
  AudioDataRequest* _this = reinterpret_cast< AudioDataRequest* >(object);
  (void)_this;
}
void AudioDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:service.AudioDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "service.AudioDataRequest.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.AudioDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "service.AudioDataRequest.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.AudioDataRequest)
  return target;
}

size_t AudioDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.AudioDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.AudioDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.AudioDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.AudioDataRequest)
    MergeFrom(*source);
  }
}

void AudioDataRequest::MergeFrom(const AudioDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.AudioDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void AudioDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.AudioDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioDataRequest::CopyFrom(const AudioDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.AudioDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioDataRequest::IsInitialized() const {
  return true;
}

void AudioDataRequest::InternalSwap(AudioDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioDataResponse::_Internal {
 public:
};

AudioDataResponse::AudioDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:service.AudioDataResponse)
}
AudioDataResponse::AudioDataResponse(const AudioDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:service.AudioDataResponse)
}

void AudioDataResponse::SharedCtor() {
success_ = false;
}

AudioDataResponse::~AudioDataResponse() {
  // @@protoc_insertion_point(destructor:service.AudioDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioDataResponse::ArenaDtor(void* object) {
  AudioDataResponse* _this = reinterpret_cast< AudioDataResponse* >(object);
  (void)_this;
}
void AudioDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:service.AudioDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:service.AudioDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:service.AudioDataResponse)
  return target;
}

size_t AudioDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:service.AudioDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:service.AudioDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:service.AudioDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:service.AudioDataResponse)
    MergeFrom(*source);
  }
}

void AudioDataResponse::MergeFrom(const AudioDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:service.AudioDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void AudioDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:service.AudioDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioDataResponse::CopyFrom(const AudioDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:service.AudioDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioDataResponse::IsInitialized() const {
  return true;
}

void AudioDataResponse::InternalSwap(AudioDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::service::RegisterHMIRequest* Arena::CreateMaybeMessage< ::service::RegisterHMIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::RegisterHMIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::RegisterHMIResponse* Arena::CreateMaybeMessage< ::service::RegisterHMIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::RegisterHMIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::RegisterAudioRequest* Arena::CreateMaybeMessage< ::service::RegisterAudioRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::RegisterAudioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::RegisterAudioResponse* Arena::CreateMaybeMessage< ::service::RegisterAudioResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::RegisterAudioResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::RegisterMQTTRequest* Arena::CreateMaybeMessage< ::service::RegisterMQTTRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::RegisterMQTTRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::RegisterMQTTResponse* Arena::CreateMaybeMessage< ::service::RegisterMQTTResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::RegisterMQTTResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::HMIServiceRequest* Arena::CreateMaybeMessage< ::service::HMIServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::HMIServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::HMIServiceResponse* Arena::CreateMaybeMessage< ::service::HMIServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::HMIServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::AudioServiceRequest* Arena::CreateMaybeMessage< ::service::AudioServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::AudioServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::AudioServiceResponse* Arena::CreateMaybeMessage< ::service::AudioServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::AudioServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::MQTTServiceRequest* Arena::CreateMaybeMessage< ::service::MQTTServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::MQTTServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::MQTTServiceResponse* Arena::CreateMaybeMessage< ::service::MQTTServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::MQTTServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::HMIDataRequest* Arena::CreateMaybeMessage< ::service::HMIDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::HMIDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::HMIDataResponse* Arena::CreateMaybeMessage< ::service::HMIDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::HMIDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::MQTTDataRequest* Arena::CreateMaybeMessage< ::service::MQTTDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::MQTTDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::MQTTDataResponse* Arena::CreateMaybeMessage< ::service::MQTTDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::MQTTDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::service::AudioDataRequest* Arena::CreateMaybeMessage< ::service::AudioDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::AudioDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::service::AudioDataResponse* Arena::CreateMaybeMessage< ::service::AudioDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::service::AudioDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
